===============================================================================

	PMD86用PCM管理TSR P86DRV Document
						by M.Kajihara(KAJA)

===============================================================================

	PMD86用の PCMデータエリアを確保して制御するTSRです。
	メインメモリ、ＥＭＳメモリに対応しています。

===============================================================================
	使用方法
-------------------------------------------------------------------------------
>P86DRV /容量
	として常駐します。
	容量は 16KB 単位で指定します。(ex. 16 = 256KB)
	デフォルトは 8 (128KB) です。
	EMSにメモリを確保出来る場合はそちらを優先して使用します。
	EMSドライバがない、または残容量が無くて確保出来なかった場合は
	メインメモリを利用します。それでもダメなら常駐しません。

	最初からメインメモリにデータエリアを確保したい場合は、
>P86DRV /容量 /M
	として下さい。

>P86DRV /R
	で解放されます。

	PMD86でPCMを使用した曲を演奏したり、PMDPCM86.EXEを使用する際には
	必ず先に常駐して下さい。

===============================================================================
	ファンクション一覧
-------------------------------------------------------------------------------
	常駐確認は、INT 65Hのベクタアドレス +2,3,4が"P86"であれば常駐とします。

	INT 65Hを使用して、以下のコマンドが制御出来ます。

	実際にプログラマサイドから使用するのはファンクション6,7程度で
	済むでしょう。

-------------------------------------------------------------------------------
	AH=0	.P86の初期化
-------------------------------------------------------------------------------
	in:	none
	out:	AL=0	正常終了
		AL=-1	異常終了

	.P86が定義されていない状態にクリアします。

-------------------------------------------------------------------------------
	AH=1	読み込む.P86 のアドレス取得
-------------------------------------------------------------------------------
	in:	none
	out:	AL=0	正常終了
		DS:DX	読み込むべきアドレス or EMM HANDLE
			Mainの場合: ds=segment   dx=0
			EMS の場合: ds=pageflame dx=emmhandle(≠0)
		BX:CX	読み込める最大サイズ
		AL=-1	異常終了

	.P86を直接定義する際に、読み込むべきアドレスと最大サイズを取得します。

-------------------------------------------------------------------------------
	AH=2	読み込んだ.P86 の PMD86への登録
-------------------------------------------------------------------------------
	in:	none
	out:	AL=0	正常終了
		AL=1	PMD86が常駐していない
		AL=-1	異常終了

	.P86を直接読み込んだ後に、P86DRVに対して読み込んだ事を通知する
	コマンドです。このコマンドを実行しない限りは演奏に使用出来ません。

-------------------------------------------------------------------------------
	AH=3	現在制御している.P86の先頭位置/サイズを返す
-------------------------------------------------------------------------------
	in:	none
	out:	AL=0	正常終了
		DS:DX	先頭位置アドレス or EMM HANDLE
			Mainの場合: ds=segment   dx=0
			EMS の場合: ds=pageflame dx=emmhandle(≠0)
		BX:CX	サイズ
		AL=-1	異常終了

	定義されている.P86データの先頭アドレスとサイズを取得します。

-------------------------------------------------------------------------------
	AH=4	次に読み込む.PC8のアドレス取得
-------------------------------------------------------------------------------
	in:	none
	out:	AL=0	正常終了
		AH	メモリ種別 / 0=Main 1=EMS
		DS:DX	読み込むべきアドレス
			Mainの場合: segment:offset
			EMS の場合: 32bit address
		BX:CX	読み込める最大サイズ
		AL=-1	異常終了

	.PC8を定義する際に、読み込むべきアドレスと最大サイズを取得します。

-------------------------------------------------------------------------------
	AH=5	.PC8の新規登録 & PMD86への情報転送
-------------------------------------------------------------------------------
	in:	AL	定義番号
		BX:CX	読み込んだサイズ
	out:	AL=0	正常終了
		AL=1	PMD86が常駐していない
		AL=-1	異常終了

	.PC8を読み込んだ後に、P86DRVに対して読み込んだ事を通知するコマンド
	です。同時に音色番号も指示します。

-------------------------------------------------------------------------------
	AH=6	.P86のDISK直読み込み & PMD86への情報転送
-------------------------------------------------------------------------------
	in:	DS:DX	Filename
		ES	環境のセグメント
	out:	AL=0	正常終了
		AL=1	PMD86が常駐していない
		AL=2	FILE NOT FOUND
		AL=3	SIZE OVER
		AL=4	TYPE MISSMATCH
		AL=5	READ ERROR
		AL=-1	異常終了

	ファイル名を指示し、DISKから直に.P86データを定義します。
	環境のセグメントは、環境変数PMD=をサーチする為に、指示が必要です。

-------------------------------------------------------------------------------
	AH=7	.P86のメモリからEMSへの直転送 & PMD86への情報転送
-------------------------------------------------------------------------------
	in:	DS:SI	.P86 先頭オフセット
	out:	AL=0	正常終了
		AL=1	PMD86が常駐していない
		AL=2	P86DRVがEMSを使用していない
		AL=3	SIZE OVER
		AL=4	TYPE MISSMATCH
		AL=-1	異常終了

	ファンクション 6 でDISK直読み込みを行いたくない場合に、
	メインメモリに一時データを読み込んでから、EMSにデータを転送するための
	ファンクションです。
	P86DRVがEMSを使用していない場合はエラーとなります。

-------------------------------------------------------------------------------
	AH=-5	EMSページマップの保存
-------------------------------------------------------------------------------
	バッファにEMSを使用している場合、ページマップを保存します。

-------------------------------------------------------------------------------
	AH=-4	EMSページマップの復帰
-------------------------------------------------------------------------------
	バッファにEMSを使用している場合、保存していたページマップを復帰します。

-------------------------------------------------------------------------------
	AH=-3	PCMDATAのセグメント情報の取得
-------------------------------------------------------------------------------
	in: 	AL:DX	= 転送開始位置 offset
	out:	DS:DX	= データバッファ位置

	AH=-5〜AH=-3は対で使用します。
	ファンクション 6 でDISK直読み込みを使用したくない場合で、かつ
	ファンクション 7 でもﾒｲﾝﾒﾓﾘにデータを溜めておけるだけの容量がない場合に
	PCMデータを定義する時に必要で、

1.	ファンクション -5 でページマップを保存
2.	ファンクション -3 でデータバッファの位置を取得
3.	データの転送 (16KB 単位で行って下さい)
4.	まだデータがある場合は 2. に戻る
5.	ファンクション -4 でページマップを復帰
6.	ファンクション 2 で PMD86に登録

	以上の経緯でPCMデータを定義することが出来ます。
	ファンクション 1 を使って読み込む位置を取得する方法もありますが、
	この方法を使えば、プログラマサイドから、EMS/メインメモリの区別を
	する必要がありません。

-------------------------------------------------------------------------------
	AH=-2	INT65H 実行中flagの取得
-------------------------------------------------------------------------------
	in:	none
	out:	AL	0で非実行中　1で実行中(=INT65H使用不可)

	TSR等で、ハードウエア割り込み中からP86DRVを利用する際に、
	現在P86DRV(INT 65H)が実行中かどうかを調べます。
	実行中は AH=1〜7までのコマンドは、使用出来ません。
	（異常終了を返します。）

-------------------------------------------------------------------------------
	AH=-1	P86DRV version取得
-------------------------------------------------------------------------------
	in:	none
	out:	AL	Version	1.1なら 11H

	P86DRVのバージョン番号を取得します。

===============================================================================
			---- End of P86DRV.DOC ----
===============================================================================
